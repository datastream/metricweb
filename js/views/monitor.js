// Generated by CoffeeScript 1.6.3
(function() {
  var app;

  app = app || {};

  (function($) {
    "use strict";
    return app.MonitorView = Backbone.View.extend({
      el: "#monitorapp",
      events: {
        "keypress #search-host": "searchHost",
        "click #refreshmetrics": "freshChart",
        "click #resetmetrics": "clearChart"
      },
      initialize: function() {
        this.$input = this.$("#search-host");
        this.$main = this.$("#main");
        this.listenTo(app.hostmetrics, "reset", this.hostmetricsShow);
        this.listenTo(app.metrics, "delete", this.metricsChart);
        this.listenTo(app.metrics, "update", this.metricsChart);
        this.listenTo(app.metrics, "add", this.metricsChart);
        return this.render();
      },
      render: function() {
        app.metrics.fetch({
          reset: true
        });
        if (app.metrics.length > 0) {
          return app.metrics.trigger("update");
        }
      },
      searchHost: function(e) {
        var setHeader;
        if (e.which !== ENTER_KEY || !this.$input.val().trim()) {
          return;
        }
        app.hostmetrics.url = app.hostmetrics.url_api + this.$input.val().trim() + "/metric";
        setHeader = function(xhr) {
          return xhr.setRequestHeader("Accept", "application/json");
        };
        app.hostmetrics.fetch({
          beforeSend: setHeader,
          reset: true
        });
        return this.$input.val("");
      },
      oneHostMetric: function(hostmetric) {
        var view;
        view = new app.HostMetricView({
          model: hostmetric
        });
        return $("#metric_list").append(view.render().el);
      },
      hostmetricsShow: function() {
        this.$("#metric_list").html("");
        return app.hostmetrics.each(this.oneHostMetric, this);
      },
      metricsChart: function() {
        var metric_list;
        metric_list = "";
        app.metrics.each(function(item) {
          if (metric_list.length > 0) {
            return metric_list += "," + item.get("name");
          } else {
            return metric_list = item.get("name");
          }
        });
        if (metric_list.length > 0) {
          this.$("#chart").show();
          return d3.json(app.metrics.url_api + metric_list, function(data) {
            return nv.addGraph(function() {
              var chart, d;
              chart = nv.models.lineChart().x(function(d) {
                return d[0];
              }).y(function(d) {
                return d[1];
              }).color(d3.scale.category10().range());
              chart.xAxis.tickFormat(function(d) {
                return d3.time.format("%m/%d %H:%M")(new Date(d * 1000));
              });
              d = [];
              _.each(data.metrics, function(element, index, list) {
                return d.push({
                  key: element.name,
                  values: element.values
                });
              });
              chart.yAxis.tickFormat(function(d) {
                return d3.format(",.2f")(d);
              });
              d3.select("#chart svg").datum(d).transition().duration(500).call(chart);
              nv.utils.windowResize(chart.update);
              return chart;
            });
          });
        }
      },
      clearChart: function() {
        var model;
        model = void 0;
        while (model = app.metrics.first()) {
          model.destroy();
        }
        app.metrics.reset();
        return this.$("#chart").hide();
      },
      freshChart: function() {
        return app.metrics.trigger("update");
      }
    });
  })(jQuery);

}).call(this);
